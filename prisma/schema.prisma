// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int          @id @default(autoincrement())
  fullName    String
  email       String       @unique
  phone       String       @unique
  password    String
  role        Role
  reviews     Review[]
  reservations Reservation[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Service {
  id          Int          @id @default(autoincrement())
  name        String
  duration    Int
  imageUrl    String?
  price       BigInt
  description String     
  branches    BranchService[]
  reservations ReservationService[] 
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Review {
  id          Int          @id @default(autoincrement())
  customerId  Int
  customer    User         @relation(fields: [customerId], references: [id])
  starRating  Int
  comment     String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([customerId])
}

model Reservation {
  id            Int          @id @default(autoincrement())
  userId        Int
  branchId      Int
  stylistId     Int
  price         BigInt
  date          DateTime
  time          String
  endTime       DateTime
  user          User         @relation(fields: [userId], references: [id])
  services      ReservationService[]
  branch        Branch       @relation(fields: [branchId], references: [id]) 
  stylist       Stylist      @relation(fields: [stylistId], references: [id])
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@index([userId])
  @@index([branchId])
  @@index([stylistId])
}

model ReservationService {
  reservationId Int
  serviceId     Int
  reservation   Reservation @relation(fields: [reservationId], references: [id])
  service       Service     @relation(fields: [serviceId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@id([reservationId, serviceId])
}

model Branch {
  id          Int          @id @default(autoincrement())
  name        String
  description String      @db.Text
  location    String
  phone       String
  openingTime DateTime
  closingTime DateTime
  services    BranchService[]
  stylists    Stylist[]
  reservations Reservation[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@unique([name, location])
}

model BranchService {
  branchId    Int
  serviceId   Int
  branch      Branch           @relation(fields: [branchId], references: [id])
  service     Service          @relation(fields: [serviceId], references: [id])
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@id([branchId, serviceId])
}

model Stylist {
  id            Int      @id @default(autoincrement())
  name          String
  imageUrl    String?
  branchId      Int?
  price         BigInt  @default(0)
  branch        Branch?   @relation(fields: [branchId], references: [id])
  reservations  Reservation[] 
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum Role {
  ADMIN
  CUSTOMER
}